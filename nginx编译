#!/bin/bash
#
#
#
		echo "正在获取nginx压缩包..."
weget http://nginx.org/download/nginx-1.16.1.tar.gz
	if [ $? -eq 0 ];then
		echo "#######包已就位.########"
	else
		echo "########获取包失败！########"
		exit
	fi
tar -xf nginx-1.16.1.tar.gz -C /usr/local
		echo "######nginx已经解压到/usr/local######"
		echo "######正在安装nginx所需环境#######"
		echo "!!!!!!请稍后......!!!!!!"
yum clean all &> /dev/null && yum makecache fast &> /dev/null && yum -y install apr apr-util ncurses ncurses-devel openssl-devel bison gcc gcc-c++ make &> /dev/null
	if [ $? -eq 0 ];then
		echo "#######环境就位######"
	else
		echo "#######环境失败######"
		exit
	fi
		echo "######正在配置######"
		echo "!!!!!!请稍后......!!!!!!"
cd /usr/local/nginx-1.16.1 && ./configure --prefix=/usr/local/nginx &> /dev/null
	if [ $? -eq 0 ];then
		echo "#########配置成功########"
	else
		echo "#########配置失败请检查！！！########"
		exit
	fi
		echo "########正在编译&&安装nginx#######"
		echo "!!!!!!请稍后......!!!!!!"
make && make install &> /dev/null	
		if [ $? -eq 0 ];then
			echo "#############编译&&安装成功!#########"
		else
			echo "############编译&&安装失败！！！请检查...############"
			exit 
		fi
/usr/local/nginx/sbin/nginx
		if [ $? -eq 0 ];then
			echo "#############nginx启动成功！再见！################"
			exit
			echo "#############nginx启动失败！！！请检查############"
			exit
		fi
#########################################################################################################################
#########################################################################################################################
yum -y install gcc gcc-c++ pcre pcre-devel openssl openssl-devel zlib zlib-devel
useradd nginx
passwd nginx 
wget http://nginx.org/download/nginx-1.16.0.tar.gz 
tar xzf nginx-1.16.0.tar.gz -C /usr/local/ 
cd /usr/local/nginx-1.16.0/ 
 ./configure --prefix=/usr/local/nginx --group=nginx 
 -user=nginx 
 --sbin-path=/usr/local/nginx/sbin/nginx 
 --conf-path=/etc/nginx/nginx.conf -error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log 
 --httpclient-body-temp-path=/tmp/nginx/client_body --http-proxy-temp-path=/tmp/nginx/proxy 
 --httpfastcgi-temp-path=/tmp/nginx/fastcgi --pid-path=/var/run/nginx.pid --lockpath=/var/lock/nginx --with-http_stub_status_module 
 --with-http_ssl_module --withhttp_gzip_static_module --with-pcre --with-http_realip_module --with-stream 
 make && make install 
 查看 nginx 安装的模块/usr/local/nginx/sbin/nginx -V 
 # 模块参数具体功能 --with-cc-opt='-g -O2 -fPIE -fstack-protector    
 //设置额外的参数将被添加到CFLAGS变量。（FreeBSD或 者ubuntu使用） 
 --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2'  
 --with-ld-opt='-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now'  
 
--prefix=/usr/local/nginx                        //指向安装目录
--conf-path=/etc/nginx/nginx.conf                //指定配置文件 
--http-log-path=/var/log/nginx/access.log        //指定访问日志 
--error-log-path=/var/log/nginx/error.log        //指定错误日志 
--lock-path=/var/lock/nginx.lock                 //指定lock文件 
--pid-path=/run/nginx.pid                        //指定pid文件 
 
--http-client-body-temp-path=/var/lib/nginx/body    //设定http客户端请求临时文件路径 
--http-fastcgi-temp-path=/var/lib/nginx/fastcgi     //设定http fastcgi临时文件路径 
--http-proxy-temp-path=/var/lib/nginx/proxy         //设定http代理临时文件路径 
--http-scgi-temp-path=/var/lib/nginx/scgi           //设定http scgi临时文件路径 
--http-uwsgi-temp-path=/var/lib/nginx/uwsgi         //设定http uwsgi临时文件路径 
 
--with-debug                                        //启用debug日志 
--with-pcre-jit                                     //编译PCRE包含“just-in-time compilation” 
--with-ipv6                                         //启用ipv6支持 
--with-http_ssl_module                              //启用ssl支持 
--with-http_stub_status_module                      //获取nginx自上次启动以来的状态 
--with-http_realip_module                 //允许从请求标头更改客户端的IP地址值，默认为关 
--with-http_auth_request_module           //实现基于一个子请求的结果的客户端授权。如果该子请求返回的 2xx响应代码，所述接入是允许的。如果它返回401或403中，访问被拒绝与相应的错误代码。由子请求返回的任何其他响应代 码被认为是一个错误。 
--with-http_addition_module               //作为一个输出过滤器，支持不完全缓冲，分部分响应请求 
--with-http_dav_module                    //增加PUT,DELETE,MKCOL：创建集合,COPY和MOVE方法 默认关 闭，需编译开启 
--with-http_geoip_module                  //使用预编译的MaxMind数据库解析客户端IP地址，得到变量值 
--with-http_gunzip_module                 //它为不支持“gzip”编码方法的客户端解压具有“ContentEncoding: gzip”头的响应。 
--with-http_gzip_static_module            //在线实时压缩输出数据流 --with-http_image_filter_module           //传输JPEG/GIF/PNG 图片的一个过滤器）（默认为不启用。gd库 要用到） 
--with-http_spdy_module                   //SPDY可以缩短网页的加载时间 --with-http_sub_module                    //允许用一些其他文本替换nginx响应中的一些文本 
--with-http_xslt_module                   //过滤转换XML请求 --with-mail                               //启用POP3/IMAP4/SMTP代理模块支持 
--with-mail_ssl_module                    //启用ngx_mail_ssl_module支持启用外部模块支持 
