package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"regexp"
	"strconv"
	"sync"
)

var wg sync.WaitGroup
func HttpGet(url string) (result []byte, err error) {
	// http.Get 获取网页
	res, err := http.Get(url)
	if err != nil {
		fmt.Println("http get failed err = ", err)
		return
	}

	defer res.Body.Close()
	// 全部读取获取的网页
	result, err = ioutil.ReadAll(res.Body)
	if err != nil {
		fmt.Println("Read All byte failed err = ", err)
		return
	}
	return
}



func Ppage(i int)(carname, carprice string, err error)  {
	// 要爬的目标url
	url := "https://www.che168.com/beijing/baoma/a0_0msdgscncgpi1ltocsp"+strconv.Itoa(i)+"exx0/?pvareaid=102179#currengpostion"
	fmt.Printf("正在爬第%v页面url：%v\n",i, url)
	// 调用封装的http.Get 获取网页
	res, err := HttpGet(url)
	if err != nil {
		fmt.Println("HttpGet err = ", err)
		return
	}


	fileCarName := make([]string, 0)
	fileCarPrice := make([]string, 0)

///////// 取内容
	reCarName := regexp.MustCompile(`carname="(?s:(.*?))"`)
	if reCarName == nil {
		fmt.Println(" regexp.MustCompile Failed err ")
		return
	}
	res1 := string(res)
	reCarjoy1 := reCarName.FindAllStringSubmatch(res1, -1)
	for _, v := range reCarjoy1 {
		carname := v[1]
		carname = string(carname)
		fileCarName = append(fileCarName, carname)
		continue
		//fmt.Println("CarName : == ", carname)
		//_, err := f.WriteString(v[1]+"\n")
		//if err != nil {
		//	fmt.Println("Write File Failed err = ", err)
		//	return
		//}

	}



///////// 取内容
	reCarPrice := regexp.MustCompile(`price="(?s:(.*?))"`)
	if reCarPrice == nil {
		fmt.Println(" regexp.MustCompile Failed err ")
		return
	}
	res2 := string(res)
	rePrijoy2 := reCarPrice.FindAllStringSubmatch(res2, -1)
	for _, v := range rePrijoy2 {
		//fmt.Printf("CarPrice : %vW\n", v[1])
		carprice := v[1]
		carprice = string(carprice)
		fileCarPrice = append(fileCarPrice, carprice)
		continue

		//fmt.Printf("CarPrice : %vW\n", carprice)
		//price = price+"W"
		//_, err := f.WriteString(price+"\n")
		//if err != nil {
		//	fmt.Println("Write File Failed err = ", err)
		//	return
		//}
	}













	SpiderOneJoy(i, fileCarName, fileCarPrice)
	return



	


	//_, err = f.Write(res)
	//if err != nil {
	//	fmt.Println("Write File Failed err = ", err)
	//	return
	//}


}

func SpiderOneJoy(i int ,carname, carprice []string)  {
	//fileName := strconv.Itoa(i) + ".html"
	fileName := strconv.Itoa(i) + ".txt"
	// 打开文件将获取的页面存下来
	f, err := os.OpenFile(fileName, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0644)
	if err != nil {
		fmt.Println("Open File failed err = ", err)
		return
	}
	n := len(carname)
	for i := 0; i < n; i++ {
		f.WriteString(carname[i]+"\t")
		f.WriteString(carprice[i]+"W"+"\n")

	}


	err = f.Close()
	if err != nil {
		fmt.Println("Close File Failed err = ", err)
		return
	}
	wg.Done()

}
func DoWork(start, end int)  {
	fmt.Printf("正在爬%v页-%v页\n", start, end)
	for i := start; i <=end ; i++ {
		wg.Add(1)
		go Ppage(i) // 并发做爬虫页面
	}
}

func main()  {
	var start, end int
	fmt.Printf("请输入想要爬的起始页：")
	fmt.Scan(&start)
	fmt.Printf("请输入想要爬的终止页：")
	fmt.Scan(&end)
	DoWork(start, end)
	wg.Wait()
}
